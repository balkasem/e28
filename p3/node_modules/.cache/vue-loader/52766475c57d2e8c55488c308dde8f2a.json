{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/e28/p3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/e28/p3/src/components/pages/AccountPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/e28/p3/src/components/pages/AccountPage.vue","mtime":1608081261669},{"path":"/Applications/XAMPP/xamppfiles/htdocs/e28/p3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/e28/p3/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/e28/p3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/e28/p3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vaW1wb3J0IHsgYXhpb3MgfSBmcm9tICdAL2NvbW1vbi9hcHAuanMnOwppbXBvcnQgeyBheGlvcyB9IGZyb20gIkAvYXBwLmpzIjsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgLy8gRm9ybSBpcyBwcmVmaWxsZWQgZm9yIGRlbW9uc3RyYXRpb24gcHVycG9zZXM7IHJlbW92ZSBpbiBmaW5hbCBhcHBsaWNhdGlvbgogICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICBlbWFpbDogJ2ppbGxAaGFydmFyZC5lZHUnLAogICAgICAgICAgICAgICAgcGFzc3dvcmQ6ICdhc2RmYXNkZicsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVycm9yczogbnVsbCwKICAgICAgICAgICAgdXNlclBvc3RzOiBudWxsLAogICAgICAgIH07CiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgICB1c2VyKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUudXNlcjsKICAgICAgICB9LAogICAgICAgIC8vIHBvc3RzKCkgewogICAgICAgIC8vICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUucG9zdHM7CiAgICAgICAgLy8gfSwKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgbG9naW4oKSB7CiAgICAgICAgICAgIGF4aW9zLnBvc3QoJ2xvZ2luJywgdGhpcy5kYXRhKS50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuYXV0aGVudGljYXRlZCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnc2V0VXNlcicsIHJlc3BvbnNlLmRhdGEudXNlcik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gcmVzcG9uc2UuZGF0YS5lcnJvcnM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgbG9nb3V0KCkgewogICAgICAgICAgICBheGlvcy5wb3N0KCdsb2dvdXQnKS50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnc2V0VXNlcicsIG51bGwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIAogICAgICAgIGxvYWRQb3N0cygpewogICAgICAgICAgICBpZiAodGhpcy51c2VyKSB7CiAgICAgICAgICAgIHRoaXMudXNlclBvc3RzID0gW107CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnVzZXJQb3N0cyArICJIaSIpOwogICAgICAgICAgICAgICAgYXhpb3MKICAgICAgICAgICAgICAgICAgICAuZ2V0KCdwb3N0JywgewogICAgICAgICAgICAgICAgICAgICAgICAvL3BhcmFtczogeyB1c2VyX2lkOiB0aGlzLnVzZXIuaWQgfSwKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggdGhlIHBvc3RzIChyZXNwb25zZS5kYXRhLnJlc3VsdHMpLCBsb2FkaW5nIHRoZSBwb3N0IGluZm9ybWF0aW9uIGZvciBlYWNoIHBvc3QKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51c2VyUG9zdHMgPSByZXNwb25zZS5kYXRhLnBvc3QubWFwKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBvc3QpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMucG9zdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0UG9zdHMoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3QuaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0UG9zdHMoIHBvc3QuaWQgKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMudXNlclBvc3RzKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgfQoKICAgIH0sCiAgICB3YXRjaDogewogICAgICAgIC8vIFdoZW4gdXNlciBjaGFuZ2VzLCB1cGRhdGUgcG9zdHMKICAgICAgICB1c2VyKCkgewogICAgICAgICAgICAvLyBpZiAodGhpcy51c2VyKSB7CiAgICAgICAgICAgICAgICB0aGlzLmxvYWRQb3N0cygpOwogICAgICAgICAgICAgICAgLy8gdGhpcy51c2VyUG9zdHMgPSBbXTsKICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudXNlclBvc3RzKTsKICAgICAgICAgICAgICAgIC8vIGF4aW9zCiAgICAgICAgICAgICAgICAvLyAgICAgLmdldCgncG9zdCcsIHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgLy9wYXJhbXM6IHsgdXNlcl9pZDogdGhpcy51c2VyLmlkIH0sCiAgICAgICAgICAgICAgICAvLyAgICAgfSkKICAgICAgICAgICAgICAgIC8vICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBwb3N0cyAocmVzcG9uc2UuZGF0YS5yZXN1bHRzKSwgbG9hZGluZyB0aGUgcG9zdCBpbmZvcm1hdGlvbiBmb3IgZWFjaCBwb3N0CiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRoaXMudXNlclBvc3RzID0gcmVzcG9uc2UuZGF0YS5wb3N0Lm1hcCgKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIChwb3N0KSA9PiB7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLnBvc3QpOwogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldFBvc3RzKAogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBwb3N0LmlkCiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vICAgICAgICAgKTsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldFBvc3RzKCBwb3N0LmlkICkpOwogICAgICAgICAgICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnVzZXJQb3N0cyk7CiAgICAgICAgICAgICAgICAvLyAgICAgfSk7CiAgICAgICAgICAgIC8vIH0KICAgICAgICB9LAogICAgfSwKICAgIG1vdW50ZWQoKSB7CiAgICAgICAgdGhpcy5sb2FkUG9zdHMoKTsKICAgIH0sCn07Cg=="},{"version":3,"sources":["AccountPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AccountPage.vue","sourceRoot":"src/components/pages","sourcesContent":["<template>\n    <div id=\"account-page\">\n        <div v-if=\"user\">\n            <h2>Hi, {{ user.name }}!</h2>\n\n            <div id=\"posts\">\n                <strong>Your Posts</strong>\n                <p v-if=\"userPosts && userPosts.length == 0\">\n                    No Posts yet.\n                </p>\n                <li v-for=\"(post, key) in userPosts\" v-bind:key=\"key\">\n                    {{ post.title }}\n                </li>\n            </div>\n\n            <button @click=\"logout\">Logout</button>\n        </div>\n\n        <div v-else id=\"loginForm\">\n            <h2>Login</h2>\n            <small\n                >(Form is prefilled for demonstration purposes; remove in final\n                application)</small\n            >\n            <div>\n                <label>Email: <input type=\"text\" v-model=\"data.email\" /></label>\n            </div>\n            <div>\n                <label\n                    >Password: <input type=\"password\" v-model=\"data.password\"\n                /></label>\n            </div>\n\n            <button @click=\"login\">Login</button>\n\n            <ul v-if=\"errors\">\n                <li class=\"error\" v-for=\"(error, index) in errors\" :key=\"index\">\n                    {{ error }}\n                </li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\n//import { axios } from '@/common/app.js';\nimport { axios } from \"@/app.js\";\n\nexport default {\n    data() {\n        return {\n            // Form is prefilled for demonstration purposes; remove in final application\n            data: {\n                email: 'jill@harvard.edu',\n                password: 'asdfasdf',\n            },\n            errors: null,\n            userPosts: null,\n        };\n    },\n    computed: {\n        user() {\n            return this.$store.state.user;\n        },\n        // posts() {\n        //     return this.$store.state.posts;\n        // },\n    },\n    methods: {\n        login() {\n            axios.post('login', this.data).then((response) => {\n                if (response.data.authenticated) {\n                    this.$store.commit('setUser', response.data.user);\n                } else {\n                    this.errors = response.data.errors;\n                }\n            });\n        },\n        logout() {\n            axios.post('logout').then((response) => {\n                if (response.data.success) {\n                    this.$store.commit('setUser', null);\n                }\n            });\n        },\n        \n        loadPosts(){\n            if (this.user) {\n            this.userPosts = [];\n                console.log(this.userPosts + \"Hi\");\n                axios\n                    .get('post', {\n                        //params: { user_id: this.user.id },\n                    })\n                    .then((response) => {\n                        // Iterate through the posts (response.data.results), loading the post information for each post\n                        this.userPosts = response.data.post.map(\n                            (post) => {\n                                //console.log(this.post);\n                                return this.$store.getters.getPosts(\n                                    post.id\n                                );\n                            }\n                        );\n                        //console.log(this.$store.getters.getPosts( post.id ));\n                        console.log(this.userPosts);\n                    });\n        }\n        }\n\n    },\n    watch: {\n        // When user changes, update posts\n        user() {\n            // if (this.user) {\n                this.loadPosts();\n                // this.userPosts = [];\n                // console.log(this.userPosts);\n                // axios\n                //     .get('post', {\n                //         //params: { user_id: this.user.id },\n                //     })\n                //     .then((response) => {\n                //         // Iterate through the posts (response.data.results), loading the post information for each post\n                //         this.userPosts = response.data.post.map(\n                //             (post) => {\n                //                 //console.log(this.post);\n                //                 return this.$store.getters.getPosts(\n                //                     post.id\n                //                 );\n                //             }\n                //         );\n                //         //console.log(this.$store.getters.getPosts( post.id ));\n                //         console.log(this.userPosts);\n                //     });\n            // }\n        },\n    },\n    mounted() {\n        this.loadPosts();\n    },\n};\n</script>\n\n"]}]}